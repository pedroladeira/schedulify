{"version":3,"file":"main.e203fdf40b6aea5db08b.hot-update.js","sources":["webpack:///./.storybook/stories/Button.stories.ts","webpack:///./.storybook/stories/Schedule.ts","webpack:///./src/GridBuilder.ts","webpack:///./src/ParametersManager.ts","webpack:///./src/Schedule.ts","webpack:///./src/ScheduleRender.ts","webpack:///./src/index.ts","webpack:///./src/interfaces/types.ts"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { Story, Meta } from '@storybook/html';\\nimport { createButton, ButtonProps } from './Button';\\nimport { createSchedule } from './Schedule';\\n\\n// More on default export: https://storybook.js.org/docs/html/writing-stories/introduction#default-export\\nexport default {\\n  title: 'Example/Button',\\n  // More on argTypes: https://storybook.js.org/docs/html/api/argtypes\\n  argTypes: {\\n    backgroundColor: { control: 'color' },\\n    label: { control: 'text' },\\n    onClick: { action: 'onClick' },\\n    primary: { control: 'boolean' },\\n    size: {\\n      control: { type: 'select' },\\n      options: ['small', 'medium', 'large'],\\n    },\\n  },\\n} as Meta;\\n\\n// More on component templates: https://storybook.js.org/docs/html/writing-stories/introduction#using-args\\nconst Template: Story<ButtonProps> = (args) => {\\n  // You can either use a function to create DOM elements or use a plain html string!\\n  // return `<div>${label}</div>`;\\n  return createSchedule(args);\\n};\\n\\nexport const Default = Template.bind({});\\n// More on args: https://storybook.js.org/docs/html/writing-stories/args\\nPrimary.args = {\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":22},\"endLoc\":{\"col\":1,\"line\":26},\"startBody\":{\"col\":37,\"line\":22},\"endBody\":{\"col\":1,\"line\":26}}};\n    \nimport { Story, Meta } from '@storybook/html';\nimport { createButton, ButtonProps } from './Button';\nimport { createSchedule } from './Schedule';\n\n// More on default export: https://storybook.js.org/docs/html/writing-stories/introduction#default-export\nexport default {\n  title: 'Example/Button',\n  // More on argTypes: https://storybook.js.org/docs/html/api/argtypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n    label: { control: 'text' },\n    onClick: { action: 'onClick' },\n    primary: { control: 'boolean' },\n    size: {\n      control: { type: 'select' },\n      options: ['small', 'medium', 'large'],\n    },\n  },\n} as Meta;\n\n// More on component templates: https://storybook.js.org/docs/html/writing-stories/introduction#using-args\nconst Template: Story<ButtonProps> = (args) => {\n  // You can either use a function to create DOM elements or use a plain html string!\n  // return `<div>${label}</div>`;\n  return createSchedule(args);\n};\n\nexport const Default = Template.bind({});\n// More on args: https://storybook.js.org/docs/html/writing-stories/args\nPrimary.args = {\n};\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => {\\n  // You can either use a function to create DOM elements or use a plain html string!\\n  // return `<div>${label}</div>`;\\n  return createSchedule(args);\\n}\" }, ...Default.parameters };","import { initSchedule } from '../../src';\n\nexport interface ScheduleProps {\n}\n\n/**\n * Primary UI component for user interaction\n */\nexport const createSchedule = ({\n}: ScheduleProps) => {\n  const schedule = document.createElement('div');\n  initSchedule(schedule);\n  return schedule;\n};\n","import { Grid, GridBlock, GridColumn } from './interfaces/grid';\n\nclass GridBuilder {\n    static build(columns: number, blocks: number): Grid {\n        const grid: Grid = Array(columns).fill({\n            blocks: Array(blocks).fill({} as GridBlock)\n        } as GridColumn);\n        return grid;\n    }\n}\n\nexport { GridBuilder };\n","import { ScheduleParams } from './interfaces/parameters';\n\nclass ParametersManager {\n    params: ScheduleParams;\n\n    constructor(params: ScheduleParams) {\n        this.params = params;\n    }\n\n    getHoursOfDay(): number {\n        return 24;\n    }\n\n    getDaysOfWeek(): number {\n        return 7;\n    }\n}\n\nexport { ParametersManager };\n","import { GridBuilder } from './GridBuilder';\nimport { Grid } from './interfaces/grid';\nimport { ScheduleParams } from './interfaces/parameters';\nimport { ParametersManager } from './ParametersManager';\nimport { ScheduleRender } from './ScheduleRender';\n\nclass Schedule {\n    paramsManager?: ParametersManager;\n    grid?: Grid;\n    element?: HTMLDivElement;\n\n    create(element: HTMLDivElement, params: ScheduleParams): void {\n        this.paramsManager = new ParametersManager(params);\n        this.grid = GridBuilder.build(\n            this.paramsManager.getDaysOfWeek(), this.paramsManager.getHoursOfDay()\n        );\n        this.element = element;\n    }\n\n    render(): void {\n        if (this.element && this.grid)\n            ScheduleRender.render(this.element, this.grid);\n    }\n\n    refresh(): void {\n        throw new Error('Method not implemented.');\n    }\n}\n\nexport { Schedule };\n","import { Grid } from './interfaces/grid';\n\nclass ScheduleRender {\n    static render(element: HTMLDivElement, grid: Grid): void {\n        ScheduleRender.build(grid);\n        const container = ScheduleRender.createElement('ss-container');\n        grid.map((column) => {\n            if (column.element) {\n                container.appendChild(column.element);\n                column.blocks.map((block) => {\n                    if (column.element && block.element) {\n                        column.element.appendChild(block.element);\n                    }\n                });\n            }\n        });\n        element.appendChild(container);\n    }\n\n    static build(grid: Grid): void {\n        grid.forEach((column, i) => {\n            column.element = ScheduleRender.createElement('ss-column');\n            column.element.innerHTML = `teste: ${i}`;\n            column.blocks.forEach((block) => {\n                block.element = ScheduleRender.createElement('ss-block');\n            });\n        });\n    }\n\n    private static createElement(classNames?: string): HTMLDivElement {\n        const elem = document.createElement('div');\n        classNames && (elem.className = classNames);\n        return elem;\n    }\n}\n\nexport { ScheduleRender };\n","import { ScheduleView } from './interfaces/types';\nimport { Schedule } from './Schedule';\n\nconst initSchedule = (element: HTMLDivElement) => {\n    const schedule = new Schedule();\n    schedule.create(element, {\n        view: ScheduleView.Week\n    });\n    schedule.render();\n    console.log('INIT');\n};\n\nexport { initSchedule };\n","enum ScheduleView {\n    Week = 'WEEK',\n    Day = 'DAY',\n}\n\nexport { ScheduleView };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AALA;AAHA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;;;;;;;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAGA;AAAA;AACA;AADA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAGA;AACA;AACA;AACA;;;;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AAGA;AACA;;;AAEA;AACA;AAEA;;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;ACXA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;A","sourceRoot":""}